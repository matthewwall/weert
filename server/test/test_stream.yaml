---
- config:
    - testset: "Test of streams API"
    # A random timestamp. Happens to be 1-Feb-2015 0000 UTC
    - variable_binds: {test_timestamp: 1422748800000, host: "http://localhost:3000"}
    # Generators to use for packet generation
    - generators:
        # Start is 1-Jan-2015 00:00:00 UTC. Increment is 5 minutes
        - 'time': {type: 'number_sequence', start: 1420070400000, increment : 300000}
        - 'temperature' : {type: 'number_sequence', start: 18}

- test:
    - name: "Create a stream without Content-type"
    - url: "/api/v1/streams"
    - method: "POST"
    - body: '{"name" : "Test stream", "description" : "Created to test streams API", "join": "join_keyword"}'
    - expected_status: [415]

- test:
    - name: "Create a stream"
    - url: "/api/v1/streams"
    - method: "POST"
    - body: '{"name" : "Test stream", "description" : "Created to test streams API", "join": "join_keyword"}'
    - headers: {Content-Type: application/json}
    - expected_status: [201]
    - extract_binds:
        - 'streamID1': {'jsonpath_mini': '_id'}
        - 'URI1'    : {header: "Location"}
    - validators:
        - compare: {jsonpath_mini: 'name', comparator: 'str_eq', expected: "Test stream"}
#        - compare: {header: "Location", comparator: 'str_eq', expected: }

- test:
    - name: "Get the stream just created, and validate it"
    - url: {'template': "/api/v1/streams/$streamID1/"}
    - expected_status: [200]
    - validators:
        - compare: {jsonpath_mini: '_id', comparator: 'str_eq', expected: {template: '$streamID1'}}
        - compare: {jsonpath_mini: 'name', comparator: 'str_eq', expected: "Test stream"}
        - compare: {jsonpath_mini: 'join', comparator: 'str_eq', expected: "join_keyword"}

- test:
    - name: "Return a non-existent stream"
    - url: "/api/v1/streams/563e70fb5ebf66aa2e0ea7ee"
    - expected_status: [200]
    - validators:
        - compare: {raw_body: "", expected: 'null'}

- test:
    - name: "Return a stream with a malformed streamID"
    - url: "/api/v1/streams/foo"
    - expected_status: [400]

- test:
    - name: "Create another stream"
    - url: "/api/v1/streams"
    - method: "POST"
    - body: '{"name" : "Test stream 2", "description" : "Created a 2nd stream to test streams API", "join": "join_keyword2"}'
    - headers: {Content-Type: application/json}
    - expected_status: [201]
    - extract_binds:
        - 'streamID2': {'jsonpath_mini': '_id'}
        - 'URI2'    : {header: "Location"}

- test:
    - name: "Get all created streams and validate them"
    - url: "/api/v1/streams"
    - expected_status: [200]
    - validators:
        - compare: {jsonpath_mini: '0', comparator: 'str_eq', expected: {template: '$URI1'}}
        - compare: {jsonpath_mini: '1', comparator: 'str_eq', expected: {template: '$URI2'}}


- test:
    - name: "Create a stream with garbled JSON"
    - url: "/api/v1/streams"
    - method: "POST"
    - body: '{"name" - "Test stream 2", "description" : "Created a 2nd stream to test streams API", "join": "join_keyword2", "name": "Stream nickname2"}'
    - headers: {Content-Type: application/json}
    - expected_status: [400]

# Time to test whether the stream is recording packets correctly.
# Create a fresh stream
- test:
    - name: "Create a fresh stream to hold a bunch of packets"
    - url: "/api/v1/streams"
    - method: "POST"
    - body: '{"name" : "Packet test stream", "description" : "Created to test sending packets to the streams API"}'
    - headers: {Content-Type: application/json}
    - expected_status: [201]
    - extract_binds:
        - 'packetStreamID' : {'jsonpath_mini': '_id'}

# Now post a bunch of packets to it, using the 'benchmark' utility
- benchmark:
    - name: "Post a bunch of packet"
    - generator_binds: {timestamp: time, temp: temperature}
    - url: {'template': "/api/v1/streams/$packetStreamID/packets/"}
    - method: "POST"
    - headers: {Content-Type: application/json}
    - body: {"template":'{"timestamp" : $timestamp, "outside_temperature": $temp}'}
    - warmup_runs: '0'
    - benchmark_runs: '10'
    - output_format: csv
    - metrics:
        - total_time: total
        - total_time: mean

# Post one more so we can test the response (not possible with benchmark):
- test:
    - name : "Post one more"
    - url: {'template': "/api/v1/streams/$packetStreamID/packets/"}
    - method: "POST"
    - headers: {Content-Type: application/json}
    - body: {"template": '{"timestamp" : $test_timestamp, "outside_temperature": 5.0}'}
    - expected_status: [201]
    - validators:
        - compare: {jsonpath_mini: "timestamp", comparator: 'eq', expected: 1422748800000}
        - compare: {header: "Location", comparator: 'str_eq', expected: {template: "$host/api/v1/streams/$packetStreamID/packets/1422748800000"}}

# Test the results
- test:
    - name: "Get the set of packets"
    - url: {'template': "/api/v1/streams/$packetStreamID/packets?sort=timestamp&direction=asc"}
    - expected_status: [200]
    - validators:
        - compare: {jsonpath_mini: '0.timestamp', comparator: 'eq', expected: 1420070400000}
#        - compare: {jsonpath_mini: '1', comparator: 'str_eq', expected}

